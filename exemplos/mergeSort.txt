void merge(int[10] arr, int l, int m, int r) {
    int i, j, k, n1, n2;
    int[10] L, R;

    n1 = m - l + 1;
    n2 = r - m;

    for (i = 0; i < n1; i = i + 1) {
        L[i] = arr[l + i];
    }

    for (j = 0; j < n2; j = j + 1) {
        R[j] = arr[m + 1 + j];
    }

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i = i + 1;
        }
        else {
            arr[k] = R[j];
            j = j + 1;
        }
        k = k + 1;
    }

    while (j < n2) {
        arr[k] = R[j];
        j = j + 1;
        k = k + 1;
    }
}

void mergeSort(int[10] arr, int l, int r) {
    if (l < r) {
        int m;

        m = l + (r - l) / 2;

        func mergeSort(arr, l, m);
        func mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

void printArray(int[10] A, int size) {
    int i;

    for (i = 0; i < size; i = i + 1) {
        print("%d ", A[i]);
    }
    println();
}

main() {
    int[10] arr;

    arr[0] = 5;
    arr[1] = 1;
    arr[2] = 4;
    arr[3] = 8;
    arr[4] = 9;
    arr[5] = 3;
    arr[6] = 5;
    arr[7] = 6;
    arr[8] = 2;
    arr[9] = 0;

    func printArray(arr, 10);

    func mergeSort(arr, 0, 9);

    func printArray(arr, 10);
}